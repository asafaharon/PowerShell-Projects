# Tool: Enhanced Malware Scanner Tool with Summary and HTML Report

# Step 1: Define the path to scan and log file
Add-Type -AssemblyName System.Windows.Forms
$folderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog
if ($folderBrowser.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
    $scanPath = $folderBrowser.SelectedPath
} else {
    Write-Host "No folder selected. Exiting..." -ForegroundColor Red
    exit
}

$logPath = "$PSScriptRoot\MalwareScanReport_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
$htmlReportPath = "$PSScriptRoot\MalwareScanReport_$(Get-Date -Format 'yyyyMMdd_HHmmss').html"

# Step 2: Define criteria for suspicious files
$suspiciousExtensions = @(".exe", ".bat", ".ps1", ".vbs", ".dll")  # Extensions considered potentially dangerous
$maxFileSizeMB = 100  # Flag files larger than 100 MB

# Step 3: Initialize log file
"Malware Scan Report" | Out-File -FilePath $logPath
"Scan Path: $scanPath" | Out-File -FilePath $logPath -Append
"Scan Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n" | Out-File -FilePath $logPath -Append

# Step 4: Count total files for progress calculation
$totalFiles = (Get-ChildItem -Path $scanPath -Recurse -File -ErrorAction SilentlyContinue).Count
$currentFile = 0
$flaggedFiles = 0

# Step 5: Function to scan files
function Scan-Files {
    param (
        [string]$path
    )

    Get-ChildItem -Path $path -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object {
        $file = $_
        $fileSizeMB = [math]::Round($file.Length / 1MB, 2)
        $isSuspicious = $false

        # Check for suspicious extensions
        if ($suspiciousExtensions -contains $file.Extension) {
            $isSuspicious = $true
            "[Suspicious Extension] $($file.FullName) - Extension: $($file.Extension)" | Out-File -FilePath $logPath -Append
        }

        # Check for large file size
        if ($fileSizeMB -gt $maxFileSizeMB) {
            $isSuspicious = $true
            "[Large File] $($file.FullName) - Size: $fileSizeMB MB" | Out-File -FilePath $logPath -Append
        }

        # If file is flagged as suspicious, log it and increment counter
        if ($isSuspicious) {
            $flaggedFiles++
            "[Flagged File] $($file.FullName) - Size: $fileSizeMB MB, Extension: $($file.Extension)" | Out-File -FilePath $logPath -Append
        }

        # Update progress
        $currentFile++
        $progress = [math]::Round(($currentFile / $totalFiles) * 100, 2)
        Write-Progress -Activity "Scanning files..." -Status "$progress% Complete" -PercentComplete $progress
    }
}

# Step 6: Start scanning
if (Test-Path $scanPath) {
    Write-Host "Starting scan on: $scanPath" -ForegroundColor Green
    Scan-Files -path $scanPath

    # Write summary to the log
    "`nSummary:" | Out-File -FilePath $logPath -Append
    "Total Files Scanned: $totalFiles" | Out-File -FilePath $logPath -Append
    "Flagged Files: $flaggedFiles" | Out-File -FilePath $logPath -Append

    Write-Host "Scan completed successfully!" -ForegroundColor Green
    Write-Host "Total Files Scanned: $totalFiles" -ForegroundColor Yellow
    Write-Host "Flagged Files: $flaggedFiles" -ForegroundColor Red

    # Step 7: Generate HTML report
    $htmlContent = @"
    <html>
    <head>
        <title>Malware Scan Report</title>
        <style>
            body { font-family: Arial; margin: 20px; }
            h1 { color: #2E8B57; }
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
        </style>
    </head>
    <body>
        <h1>Malware Scan Report</h1>
        <p><strong>Scan Path:</strong> $scanPath</p>
        <p><strong>Scan Time:</strong> $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
        <p><strong>Total Files Scanned:</strong> $totalFiles</p>
        <p><strong>Flagged Files:</strong> $flaggedFiles</p>
        <h2>Details</h2>
        <table>
            <tr><th>File</th><th>Reason</th></tr>
"@

    Get-Content -Path $logPath | ForEach-Object {
        if ($_ -match '\[Flagged File\]') {
            $htmlContent += "<tr><td>$($_ -replace '\[Flagged File\] ', '')</td><td>Suspicious</td></tr>"
        }
    }

    $htmlContent += @"
        </table>
    </body>
    </html>
"@

    $htmlContent | Out-File -FilePath $htmlReportPath -Encoding utf8
    Write-Output "HTML report saved at: $htmlReportPath"

    # Open the HTML report automatically
    Start-Process $htmlReportPath

} else {
    Write-Host "Error: Path not found: $scanPath" -ForegroundColor Red
}
